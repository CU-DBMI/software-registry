:root {
  --black: #000000;
  --dark: #0f3d5c;
  --mid: #1ea1a3;
  --light: #ccf2e2;
  --white: #fffef8;

  --fast: 0.2s ease-in-out;
}

*:where(:not(html, iframe, svg, img):not(svg *)) {
  all: unset;
  display: revert;
}

* {
  text-underline-offset: 0.2em;
}

*,
*::before,
*::after {
  box-sizing: border-box;
}

html {
  -webkit-text-size-adjust: none;
  text-size-adjust: none;
  color: var(--black);
  font-size: 14pt;
  font-family: "IBM Plex Sans", sans-serif;
}

body {
  display: flex;
  flex-direction: column;
  min-height: 100vh;
}

main {
  display: flex;
  flex-grow: 1;
  flex-direction: column;
}

main > section:last-child {
  flex-grow: 1;
}

section {
  display: flex;
  flex-direction: column;
  align-items: center;
  padding: 60px max(40px, (100% - 1200px) / 2);
  gap: 60px;
  background: var(--white);
}

b,
strong {
  font-weight: 600;
}

i {
  font-style: italic;
}

a {
  cursor: pointer;
  transition: color var(--fast);
}

p {
  max-width: 780px;
  line-height: 2;
  text-align: justify;
}

p a {
  text-decoration-line: underline;
}

p a:is(:hover, :focus) {
  color: var(--mid);
}

header {
  display: flex;
  position: relative;
  flex-direction: column-reverse;
  align-items: center;
  justify-content: center;
  padding: 150px 20px;
  gap: 10px;
  background: var(--light);
  font-weight: 300;
  text-align: center;
}

header > * {
  z-index: 1;
}

footer {
  display: flex;
  flex-wrap: wrap;
  align-items: center;
  justify-content: center;
  padding: 40px;
  gap: 30px;
  background: var(--dark);
  color: var(--white);
  text-align: center;
}

footer a:is(:hover, :focus) {
  color: var(--mid);
}

h1 {
  display: flex;
  flex-wrap: wrap;
  justify-content: center;
  gap: 0 20px;
  color: var(--dark);
  font-size: 2.5rem;
  font-family: "IBM Plex Mono", monospace;
}

@media (max-width: 400px) {
  h1 {
    font-size: 2rem;
  }
}

.word {
  display: inline-flex;
  flex-wrap: wrap;
  justify-content: center;
}

.char {
  text-transform: uppercase;
  animation: title1 0.5s var(--delay) both cubic-bezier(1, 0, 0, 1),
    title2 5s var(--delay) infinite;
}

@keyframes title1 {
  from {
    width: 0;
    opacity: 0;
  }
}

@keyframes title2 {
  0%,
  10% {
    color: var(--dark);
  }
  2.5%,
  7.5% {
    color: var(--mid);
  }
  5% {
    color: var(--light);
  }
}

h2 {
  font-size: 1.2rem;
  animation: subtitle 2s 1s both;
}

h2 .icon {
  position: relative;
  top: 0.15em;
  margin-right: 0.75em;
  color: var(--dark);
}

@keyframes subtitle {
  from {
    color: var(--light);
    opacity: 0;
  }
}

.cursor {
  animation: cursor 1s 2s infinite steps(1);
}

@keyframes cursor {
  0%,
  100% {
    opacity: 1;
  }
  50% {
    opacity: 0;
  }
}

canvas {
  position: absolute;
  width: 100% !important;
  height: 100% !important;
  inset: 0;
  animation: canvas 3s 1s both;
}

@keyframes canvas {
  from {
    opacity: 0;
  }
}

.buttons {
  display: flex;
  flex-wrap: wrap;
  justify-content: center;
  gap: 30px;
}

.button {
  display: flex;
  position: relative;
  align-items: center;
  padding: 10px 15px;
  gap: 10px;
  border-radius: 5px;
  background: var(--dark);
  color: var(--white);
  transition: color var(--fast), background var(--fast);
}

.button:is(:hover, :focus-visible) {
  background: var(--light);
  color: var(--dark);
}

.button::after {
  z-index: 1;
  position: absolute;
  inset: -7.5px;
  border: dashed 2px transparent;
  border-radius: 10px;
  content: "";
  pointer-events: none;
}

.button:is(:hover, :focus-visible)::after {
  animation: button 1s ease-in-out;
}

@keyframes button {
  0%,
  100% {
    clip-path: inset(0 0 97% 0);
  }
  25% {
    clip-path: inset(0 97% 0 0);
  }
  50% {
    clip-path: inset(97% 0 0 0);
  }
  75% {
    clip-path: inset(0 0 0 97%);
  }
  0%,
  100% {
    border-color: transparent;
  }
  10% {
    border-color: var(--dark);
  }
  50% {
    border-color: var(--mid);
  }
  90% {
    border-color: var(--light);
  }
}

.icon {
  flex-shrink: 0;
  height: 1em;
}

.icon path {
  fill: currentColor;
}

.truncate {
  -webkit-box-orient: vertical;
  -webkit-line-clamp: 3;
  display: -webkit-box;
  max-width: 100%;
  overflow: hidden;
}

.grid {
  --ratio: 1.1547;
  --gap: 5px;
  display: grid;
  grid-template-columns: repeat(var(--cols), 1fr);
  place-content: center;
  width: 100%;
  padding: 40px 60px;
  gap: calc(var(--gap) / var(--ratio)) var(--gap);
}

.cell {
  display: flex;
  position: relative;
  align-items: center;
  justify-content: center;
  aspect-ratio: var(--ratio) / 1;
  transform: translateX(
    calc(var(--offset) * 25% + (var(--offset) * var(--gap)) / 4)
  );
  transition: opacity var(--fast);
}

.grid:has(.cell:hover, .hex:focus) .cell {
  opacity: 0.75;
}

.cell:hover,
.cell:has(.hex:focus) {
  z-index: 1;
  opacity: 1 !important;
}

.hex {
  display: flex;
  position: absolute;
  flex-direction: column;
  align-items: center;
  justify-content: center;
  aspect-ratio: 1 / var(--ratio);
  width: 100%;
  gap: 5px;
  color: var(--white);
  text-align: center;
  overflow-wrap: anywhere;
  animation: hex 1s var(--delay) both;
}

@keyframes hex {
  from {
    opacity: 0;
  }
}

.hex > * {
  position: absolute;
  width: 100%;
  height: 100%;
  inset: 0;
}

.shape {
  overflow: visible;
  pointer-events: none;
}

.stroke {
  fill: none;
  stroke: var(--dark);
  stroke-width: 0.03;
  stroke-dasharray: 0.01 0.01 0.01 0.01 0.01 0.01 0.01 0.01 0.01 0.01 0.01 0.01
    0.01 0.01 0.01 0.01 0.01 1.5;
  stroke-dashoffset: 1.84;
  transform: scale(1.1);
}

:is(.cell:hover, .cell:has(.hex:focus)) .stroke {
  animation: stroke 1.25s linear;
}

@keyframes stroke {
  to {
    stroke-dashoffset: 0.17;
  }
}

.fill {
  fill: var(--mid);
}

.image {
  clip-path: polygon(0% 25%, 0% 75%, 50% 100%, 100% 75%, 100% 25%, 50% 0%);
  pointer-events: none;
}

.img {
  position: absolute;
  width: 100%;
  height: 100%;
  inset: 0;
  object-fit: cover;
  transition: opacity var(--fast), transform var(--fast), filter var(--fast);
}

svg.img {
  fill: currentColor;
  text-anchor: middle;
  dominant-baseline: middle;
}

.hex:is(:hover, :focus-visible) .img {
  transform: scale(1.1);
  opacity: 0;
}

.text {
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
  padding: 10px;
  overflow: hidden;
  gap: 5px;
  transform: scale(0.9);
  opacity: 0;
  transition: opacity var(--fast), transform var(--fast);
}

.hex:is(:hover, :focus-visible) .text {
  transform: scale(1);
  opacity: 1;
}

.text > :first-of-type {
  font-weight: 600;
  font-size: 1.2rem;
}
